#!/bin/bash

# Загрузка конфигурации
CONFIG_FILE="/etc/system_monitor/system_monitor.conf"
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Config file not found: $CONFIG_FILE" >&2
    exit 1
fi

# Функция для парсинга конфига
get_config() {
    awk -F ' = ' -v section="$1" -v key="$2" '
        $0 ~ /^\[.*\]/ {
            gsub(/\[|\]/, "", $0)
            current_section = $0
        }
        current_section == section && $1 == key {
            gsub(/\"/, "", $2)
            print $2
        }
    ' "$CONFIG_FILE"
}

# Инициализация переменных
LOG_DIR=$(get_config "main" "log_dir")
PID_FILE=$(get_config "main" "pid_file")
INTERFACES=$(get_config "network" "interfaces" | tr ',' ' ')

# Создаем директории и файлы
mkdir -p "$LOG_DIR" || { echo "Cannot create log directory" >&2; exit 1; }
touch "$PID_FILE" || { echo "Cannot create pid file" >&2; exit 1; }

# Функция логирования
log() {
    local log_file="$LOG_DIR/$1.log"
    local message="$2"
    echo "$(date "+%b %d %H:%M:%S") $message" >> "$log_file"
}

# Мониторинг CPU, RAM и температуры
monitor_cpu_ram_temp() {
    local interval=$(get_config "intervals" "cpu_ram")
    local temp_paths=(
        "/sys/class/thermal/thermal_zone0/temp"
        "/sys/class/thermal/thermal_zone1/temp"
    )

    while true; do
        cpu_usage=$(top -bn1 | awk '/Cpu\(s\)/ {print 100 - $8}')
        ram_usage=$(free | awk '/Mem/ {printf "%.1f%%", $3/$2*100}')

        local temps=()
        for path in "${temp_paths[@]}"; do
            if [ -f "$path" ]; then
                temp=$(awk '{printf "%.1f", $1/1000}' "$path")
                [ -n "$temp" ] && temps+=("$temp")
            fi
        done

        local temp_str="N/A"
        if [ ${#temps[@]} -eq 1 ]; then
            temp_str="${temps[0]}\u00b0C"
        elif [ ${#temps[@]} -eq 2 ]; then
            temp_str="CPU:${temps[0]}\u00b0C SOC:${temps[1]}\u00b0C"
        fi

        log "cpu_stats" "CPU:${cpu_usage}% RAM:${ram_usage} ${temp_str}"

        if command -v bc >/dev/null && [ -n "${temps[0]}" ] && [ "$(echo "${temps[0]} > 80" | bc -l)" -eq 1 ]; then
            log "alerts" "WARNING: High temperature detected: ${temps[0]}\u00b0C"
        fi

        sleep "$interval"
    done
}

# Мониторинг перезагрузки
check_reboot() {
    local last_boot=$(who -b | awk '{print $3,$4}')
    log "system" "Последняя загрузка системы: $last_boot"

    if journalctl -b -1 | grep -q "unexpected shutdown"; then
        log "alerts" "ВНИМАНИЕ: Неожиданное завершение работы системы"
    fi
}

# Мониторинг SSH
monitor_ssh() {
    local interval=60
    local max_failures=3
    local failure_count=0

    while true; do
        if ! ss -tnl | grep -q ':22'; then
            ((failure_count++))
            log "ssh" "Ошибка подключения SSH (попытка $failure_count/$max_failures)"

            if [ $failure_count -ge $max_failures ]; then
                log "ssh" "Критическая ошибка SSH - перезапуск сервиса"
                systemctl restart ssh
                failure_count=0
            fi
        else
            failure_count=0
        fi
        sleep "$interval"
    done
}

# Мониторинг диска
monitor_disk() {
    local interval=$(get_config "intervals" "disk")

    while true; do
        df -h | awk '
        NR>1 {
            use=$5;
            gsub("%","",use);
            if(use > 90) {
                print "CRITICAL: "$6" at "use"%"
            } else if(use > 80) {
                print "WARNING: "$6" at "use"%"
            }
        }' | while read -r alert; do
            log "disk_alerts" "$alert"
        done
        sleep "$interval"
    done
}

# Мониторинг сети
monitor_network() {
    local interval=$(get_config "intervals" "network")
    while true; do
        for iface in $INTERFACES; do
            if ip link show "$iface" | grep -q "state UP"; then
                status="UP"
            else
                status="DOWN"
            fi

            ips=$(ip -4 -o addr show "$iface" 2>/dev/null | awk '{print $4}' | paste -sd ',')

            if [ -z "$ips" ]; then
                log_msg="$iface: $status"
            else
                log_msg="$iface: $status ($ips)"
            fi

            log "network" "$log_msg"
        done
        sleep "$interval"
    done
}

# Запуск мониторинга
monitor_cpu_ram_temp & echo $! >> "$PID_FILE"
monitor_network & echo $! >> "$PID_FILE"
monitor_disk & echo $! >> "$PID_FILE"
check_reboot
monitor_ssh & echo $! >> "$PID_FILE"

# Ожидание завершения процессов
wait

# Лог systemd сообщений о падении служб
if ($syslogtag == 'systemd' or $programname == 'systemd') and \
   (msg contains 'Failed' or msg contains 'failure' or msg contains 'failed') then {
    /var/log/system-monitor/failed-services.log
    stop
}


# Функция для парсинга конфига
get_config() {
    awk -F ' = ' -v section="$1" -v key="$2" '
        $0 ~ /^\[.*\]/ {
            gsub(/\[|\]/, "", $0)
            current_section = $0
        }
        current_section == section && $1 == key {
            gsub(/\"/, "", $2)
            print $2
        }
    ' "$CONFIG_FILE"
}
● system-monitor.service - System Monitoring Service
     Loaded: loaded (/etc/systemd/system/system-monitor.service; enabled; vendor preset: enabled)
     Active: active (running) since Mon 2025-05-05 15:33:34 UTC; 17s ago
   Main PID: 2763998 (system-monitor.)
      Tasks: 9 (limit: 2271)
     Memory: 3.4M
     CGroup: /system.slice/system-monitor.service
             ├─2763998 /bin/bash /usr/local/bin/system-monitor.sh
             ├─2764010 /bin/bash /usr/local/bin/system-monitor.sh
             ├─2764011 /bin/bash /usr/local/bin/system-monitor.sh
             ├─2764013 /bin/bash /usr/local/bin/system-monitor.sh
             ├─2764047 /bin/bash /usr/local/bin/system-monitor.sh
             ├─2764053 sleep 60
             ├─2764239 sleep 30
             ├─2783142 sleep 3
             ├─2785510 df -h
             ├─2785511 /bin/bash /usr/local/bin/system-monitor.sh
             └─2785512 /bin/bash /usr/local/bin/system-monitor.sh

May 05 15:33:51 zephyr system-monitor[2785490]: sleep: invalid time interval ‘’
May 05 15:33:51 zephyr system-monitor[2785490]: Try 'sleep --help' for more information.
May 05 15:33:51 zephyr system-monitor[2785494]: sleep: invalid time interval ‘’
May 05 15:33:51 zephyr system-monitor[2785494]: Try 'sleep --help' for more information.
May 05 15:33:51 zephyr system-monitor[2785498]: sleep: invalid time interval ‘’
May 05 15:33:51 zephyr system-monitor[2785498]: Try 'sleep --help' for more information.
May 05 15:33:51 zephyr system-monitor[2785502]: sleep: invalid time interval ‘’
May 05 15:33:51 zephyr system-monitor[2785502]: Try 'sleep --help' for more information.
May 05 15:33:51 zephyr system-monitor[2785509]: sleep: invalid time interval ‘’
May 05 15:33:51 zephyr system-monitor[2785509]: Try 'sleep --help' for more information.

[main]
log_dir = /var/log/system_monitor
pid_file = /var/run/system_monitor.pid

[intervals]
cpu_ram = 30
services = 10
kernel = 10
network = 3

[network]
interfaces = eth0,wlan0


get_config() {
    local section="$1"
    local key="$2"
    local in_section=0
    while IFS= read -r line; do
        # Удаление пробелов по краям
        line="$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')"

        # Пропуск пустых строк и комментариев
        [[ -z "$line" || "$line" =~ ^# ]] && continue

        # Поиск секции
        if [[ "$line" =~ ^\[(.*)\]$ ]]; then
            [[ "${BASH_REMATCH[1]}" == "$section" ]] && in_section=1 || in_section=0
            continue
        fi

        # Поиск ключа внутри нужной секции
        if [[ $in_section -eq 1 && "$line" =~ ^$key[[:space:]]*=[[:space:]]*(.*)$ ]]; then
            echo "${BASH_REMATCH[1]}" | tr -d '"'
            return
        fi
    done < "$CONFIG_FILE"
}

# Мониторинг systemd (падения служб)
:programname, startswith, "systemd" {
    /var/log/system_monitor/systemd.log
    stop
}

# Фильтр для критических сообщений systemd
:msg, contains, "failed" /var/log/system_monitor/systemd_errors.log
:msg, contains, "Failed" /var/log/system_monitor/systemd_errors.log

# Перенаправление roslaunch логов
:programname, startswith, "roslaunch" {
    /var/log/system_monitor/roslaunch.log
    stop
}

# Логирование ошибок ROS
:programname, startswith, "ros" {
    if $msg contains "ERROR" then {
        /var/log/system-monitor/ros_errors.log
    }
    stop
}

# exclude = nfs-idmapd|dnsmasq|systemd-networkd-wait-online


##########################################
# Модули
##########################################
module(load="imuxsock")                           # приём логов от приложений через /dev/log
module(load="imklog")                             # чтение логов ядра (/proc/kmsg)
module(load="imjournal" StateFile="imjournal.state") # подключение к systemd-journald

##########################################
# Общие параметры
##########################################
$MaxMessageSize 64k
$WorkDirectory /var/spool/rsyslog
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

##########################################
# Каталог логов (создайте вручную)
# sudo mkdir -p /var/log/system_monitor
# sudo chown syslog:adm /var/log/system_monitor
# sudo chmod 750 /var/log/system_monitor
##########################################

##########################################
# 1. Мониторинг systemd (с исключениями)
##########################################
if $programname startswith 'systemd' and \
   $programname != 'systemd-networkd-wait-online' and \
   $programname != 'dnsmasq' and \
   $programname != 'nfs-idmapd' then {

    if $msg contains ['Failed', 'failed'] then {
        /var/log/system_monitor/systemd_errors.log
    }

    /var/log/system_monitor/systemd.log
    stop
}

##########################################
# 2. Логи roslaunch
##########################################
if $programname startswith 'roslaunch' then {
    /var/log/system_monitor/roslaunch.log
    stop
}

##########################################
# 3. Ошибки ROS
##########################################
if $programname startswith 'ros' then {
    if $msg contains 'ERROR' then {
        /var/log/system_monitor/ros_errors.log
    }
    stop
}

##########################################
# 4. Критические сообщения ядра
##########################################
kern.crit     /var/log/system_monitor/kernel_critical.log

##########################################
# 5. Аварии ядра и аппаратные ошибки
##########################################
:msg, contains, "Kernel panic"           /var/log/system_monitor/kernel_critical.log
:msg, contains, "BUG:"                   /var/log/system_monitor/kernel_critical.log
:msg, contains, "Hardware Error"         /var/log/system_monitor/hardware_errors.log
:msg, contains, "Machine check events"   /var/log/system_monitor/hardware_errors.log

##########################################
# 6. Ошибки памяти и ресурсов
##########################################
:msg, contains, "Out of memory"              /var/log/system_monitor/system_errors.log
:msg, contains, "Killed process"             /var/log/system_monitor/system_errors.log
:msg, contains, "No space left on device"    /var/log/system_monitor/system_errors.log

##########################################
# 7. Общие критичные сообщения (все источники)
##########################################
:syslogseverity <= 3                         /var/log/system_monitor/critical.log

##########################################
# 8. Сетевые ошибки
##########################################
:msg, contains, "link is down"              /var/log/system_monitor/network_errors.log
:msg, contains, "Network is unreachable"    /var/log/system_monitor/network_errors.log


#!/bin/bash

RTSP_URL="rtsp://login:pass@ip/stream"
OUT_DIR="/tmp/camshots"
mkdir -p "$OUT_DIR"

while true; do
    TIMESTAMP=$(date +%s)
    ffmpeg -rtsp_transport tcp -i "$RTSP_URL" -vframes 1 -q:v 2 "$OUT_DIR/snapshot.jpg" -y -loglevel quiet
    sleep 10
done


<!DOCTYPE html>
<html>
<head>
  <title>Камера</title>
  <meta charset="UTF-8">
  <style>
    body { text-align: center; background: #000; color: white; }
    img { max-width: 100%; height: auto; }
  </style>
</head>
<body>
  <h1>Прямая картинка с камеры</h1>
  <img id="cam" src="snapshot.jpg" alt="Камера">
  <script>
    setInterval(() => {
      const img = document.getElementById('cam');
      img.src = 'snapshot.jpg?t=' + new Date().getTime(); // чтобы избежать кеша
    }, 10000); // обновление каждые 10 секунд
  </script>
</body>
</html>



python3 -m http.server 8080 --directory /tmp/camshots


# System Monitoring Installer

[![CI/CD Pipeline](https://gitlab.com/<your-namespace>/<your-project>/badges/main/pipeline.svg)](https://gitlab.com/<your-namespace>/<your-project>/-/pipelines)
[![Download Latest](https://img.shields.io/badge/download-.deb-blue)](https://gitlab.com/<your-namespace>/<your-project>/-/packages)

Этот пакет устанавливает конфигурации для мониторинга системы.

## Установка

1. Загрузите последнюю версию `.deb`-пакета с [Package Registry GitLab](https://gitlab.com/<your-namespace>/<your-project>/-/packages).
2. Установите его с помощью команды:

   ```bash
   sudo dpkg -i system-monitoring_<version>.deb


Вот обновлённый `README.md` с интеграцией GitLab: значок CI/CD и ссылка на скачивание последней версии `.deb` из Package Registry:

````markdown
# System Monitoring Installer

[![CI/CD Pipeline](https://gitlab.com/<your-namespace>/<your-project>/badges/main/pipeline.svg)](https://gitlab.com/<your-namespace>/<your-project>/-/pipelines)
[![Download Latest](https://img.shields.io/badge/download-.deb-blue)](https://gitlab.com/<your-namespace>/<your-project>/-/packages)

Этот пакет устанавливает конфигурации для мониторинга системы.

## Установка

1. Загрузите последнюю версию `.deb`-пакета с [Package Registry GitLab](https://gitlab.com/<your-namespace>/<your-project>/-/packages).
2. Установите его с помощью команды:

   ```bash
   sudo dpkg -i system-monitoring_<version>.deb
````

Замените `<version>` на актуальную версию, например:

```bash
sudo dpkg -i system-monitoring_1.0.3.deb
```

## Удаление конфигураций мониторинга

Чтобы удалить все установленные конфигурации мониторинга, выполните:

```bash
sudo disable_monitoring
```

Этот бинарный файл входит в пакет и автоматически отключит все службы и удалит связанные файлы.

## Требования

* Операционная система: Ubuntu 20.04+, Debian 10+
* Права суперпользователя (`sudo`)

---

Для вопросов и предложений создайте issue в [репозитории проекта](https://gitlab.com/<your-namespace>/<your-project>).

```

🔧 **Не забудь заменить**:
- `<your-namespace>` на имя группы или пользователя в GitLab
- `<your-project>` на название проекта

Хочешь, чтобы я сразу подставил конкретные ссылки, если ты дашь название проекта и группы?


#!/bin/bash

UDEV_RULES_FILE="/etc/udev/rules.d/71-persistent-net-custom.rules"

echo "# Simple network renaming rules" > "$UDEV_RULES_FILE"

i=0
for dev in $(ls /sys/class/net | grep -v '^lo$' | sort); do
    mac=$(cat "/sys/class/net/$dev/address" 2>/dev/null)
    [[ -n "$mac" ]] && echo "SUBSYSTEM==\"net\", ACTION==\"add\", ATTR{address}==\"$mac\", NAME=\"eth$i\"" >> "$UDEV_RULES_FILE"
    ((i++))
done

udevadm control --reload-rules
echo "Created rules for $i interfaces. Reboot to apply."
```

#!/bin/bash

TMP_RULE="/etc/udev/rules.d/70-temp-net.rules"
FINAL_RULE="/etc/udev/rules.d/71-persistent-net-custom.rules"
BACKUP_DIR="/tmp/udev-net-rename-backup"
mkdir -p "$BACKUP_DIR"

active_macs=()
inactive_macs=()

# Получаем все интерфейсы кроме lo
interfaces=($(ls /sys/class/net | grep -v '^lo$' | sort))

echo "[1/3] Начинаем проверку линка для каждого интерфейса..."

for iface in "${interfaces[@]}"; do
    mac=$(cat /sys/class/net/"$iface"/address)

    echo "SUBSYSTEM==\"net\", ACTION==\"add\", ATTR{address}==\"$mac\", NAME=\"eth0\"" > "$TMP_RULE"
    udevadm control --reload-rules
    udevadm trigger --attr-match=subsystem=net

    # Подождем, пока правило применится
    sleep 2

    # Проверим operstate у eth0
    if [[ -e /sys/class/net/eth0/operstate ]]; then
        state=$(cat /sys/class/net/eth0/operstate)
        echo "Интерфейс $iface (MAC $mac) как eth0 в состоянии: $state"
        if [[ "$state" == "up" ]]; then
            active_macs+=("$mac")
        else
            inactive_macs+=("$mac")
        fi
    else
        echo "Интерфейс $iface (MAC $mac) не появился как eth0. Пропускаем."
        inactive_macs+=("$mac")
    fi
done

# Создаем итоговый udev-файл
echo "[2/3] Создаём финальные правила в $FINAL_RULE..."
echo "# Final persistent interface naming rules" > "$FINAL_RULE"

i=0
for mac in "${active_macs[@]}"; do
    echo "SUBSYSTEM==\"net\", ACTION==\"add\", ATTR{address}==\"$mac\", NAME=\"eth$i\"" >> "$FINAL_RULE"
    ((i++))
done

for mac in "${inactive_macs[@]}"; do
    echo "SUBSYSTEM==\"net\", ACTION==\"add\", ATTR{address}==\"$mac\", NAME=\"eth$i\"" >> "$FINAL_RULE"
    ((i++))
done

rm -f "$TMP_RULE"
udevadm control --reload-rules

echo "[3/3] Готово. Назначено:"
echo "  - Активных интерфейсов (UP): ${#active_macs[@]}"
echo "  - Неактивных интерфейсов: ${#inactive_macs[@]}"
echo "Файл правил: $FINAL_RULE"
echo "⚠️ Перезагрузите систему, чтобы правила применились."


#!/bin/bash

# Цвета
GREEN="\033[1;32m"
YELLOW="\033[1;33m"
RED="\033[1;31m"
NC="\033[0m" # no color

echo -e "${YELLOW}Проверка сетевых менеджеров...${NC}"

# Netplan
if [ -d /etc/netplan ]; then
    echo -e "${GREEN}Netplan обнаружен:${NC} /etc/netplan"
    for f in /etc/netplan/*.yaml; do
        grep renderer "$f" && echo -e "${YELLOW} (из файла $f)${NC}"
    done
else
    echo -e "${RED}Netplan не найден.${NC}"
fi

# NetworkManager
if systemctl is-active --quiet NetworkManager; then
    echo -e "${GREEN}NetworkManager${NC} активен"
else
    echo -e "${YELLOW}NetworkManager${NC} не активен"
fi

# systemd-networkd
if systemctl is-active --quiet systemd-networkd; then
    echo -e "${GREEN}systemd-networkd${NC} активен"
else
    echo -e "${YELLOW}systemd-networkd${NC} не активен"
fi

# ifupdown
if [ -f /etc/network/interfaces ]; then
    if grep -q "iface" /etc/network/interfaces; then
        echo -e "${GREEN}ifupdown${NC} (файл /etc/network/interfaces используется)"
    else
        echo -e "${YELLOW}/etc/network/interfaces есть, но iface не найден${NC}"
    fi
else
    echo -e "${RED}/etc/network/interfaces не найден${NC}"
fi
