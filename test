stages:
  - build

build_distr:
  stage: build
  image:
    name: sp-dk-reg.seaproject.ru/tech-img-01:latest
  script:
    - |
      # Подготовка директорий
      mkdir -p /mnt/iso
      mkdir -p /mnt/ansible
      mkdir -p /mnt/tmpiso
      
      # Монтирование сетевых ресурсов
      mount -t cifs "//sp-dk-smb.seaproject.ru/project_iso" -o user=$SMB_USER,password=$SMB_PASS,ro,iocharset=utf8,vers=2.1 /mnt/iso
      mount -t cifs "//sp-dk-smb.seaproject.ru/project_ansible" -o user=$SMB_USER,password=$SMB_PASS,rw,iocharset=utf8 /mnt/ansible

      # Анализ пути проекта
      IFS='/' read -r -a PARTS <<< "$CI_PROJECT_PATH"
      for i in "${!PARTS[@]}"; do
        if [[ "${PARTS[$i]}" == "deploy" ]]; then
          DEPLOY_INDEX=$i
          break
        fi
      done
      [ -z "$DEPLOY_INDEX" ] && exit 1

      # Определение структуры каталогов
      if [[ "${PARTS[$((DEPLOY_INDEX -1))]}" =~ ^[^0-9]*$ ]]; then
        BASE_PARTS=("${PARTS[@]:1:$((DEPLOY_INDEX - 1))}")
        SUBDIR="${PARTS[$((DEPLOY_INDEX - 1))]}"
        PRIME_DIR=$(IFS=_ ; echo "${BASE_PARTS[*]}")
        DIR_NAME="$PRIME_DIR/$SUBDIR"
        mkdir -p "$UNPACK_DIR/$DIR_NAME"
        cp -r ./* "$UNPACK_DIR/$DIR_NAME"/
      else  
        BASE_PARTS=("${PARTS[@]:1:$DEPLOY_INDEX}")
        DIR_NAME=$(IFS=_ ; echo "${BASE_PARTS[*]}")
        mkdir -p "$UNPACK_DIR/$DIR_NAME"
        cp -r ./* "$UNPACK_DIR/$DIR_NAME"/
      fi  

      # Инициализация переменных
      TXT_FILE="./inventory.numbers.txt"
      ISO_DIR="/mnt/iso/"
      UNPACK_DIR="/mnt/ansible"
      MOUNT_DIR="/mnt/tmpiso"
      ISO_PATTERNS=()

      # Парсинг шаблонов ISO
      while IFS=";" read -r pattern _ _; do
        ISO_PATTERNS+=("$(echo "$pattern" | xargs)")
      done < "$TXT_FILE"

      ISO_PATTERNS=($(printf "%s\n" "${ISO_PATTERNS[@]}" | sort -u))
      echo ${ISO_PATTERNS[*]}

      # Поиск и монтирование ISO
      for pattern in "${ISO_PATTERNS[@]}"; do
        echo "Поиск ISO по шаблону: '${pattern}*.iso'"
        
        found_isos=()
        while IFS= read -r -d $'\0' iso; do
          found_isos+=("$iso")
        done < <(find "$ISO_DIR" -type f -iname "${pattern}*.iso" -print0)
        
        if [ ${found_isos[@]} -eq 0 ]; then
          echo "  Не найдено ни одного ISO для шаблона ${pattern}"
          continue
        fi
        
        echo "  Найдено ISO: ${found_isos[@]}"
        
        for iso in "${found_isos[@]}"; do
          iso_name=$(basename "$iso" .iso | tr ' ' '_')
          mount_point="$MOUNT_DIR/$iso_name"
          
          if mount | grep -q "$mount_point"; then
            echo "  [ПРОПУСК] $iso уже смонтирован в $mount_point"
            continue
          fi
          
          echo "  Монтирую: $iso"
          echo "  В точку: $mount_point"
          
          mkdir -p "$mount_point"
          
          if mount -o loop,rw  "$iso" "$mount_point" 2>/dev/null; then
            echo "  [OK] Успешно смонтировано"
          else
            echo "  [ОШИБКА] Не удалось смонтировать $iso" >&2
            rmdir "$mount_point" 2>/dev/null
          fi
        done
      done

      # Сортировка файлов
      echo "=== Начало сортировки файлов ==="
      echo "UNPACK_DIR: $UNPACK_DIR"
      echo "DIR_NAME: $DIR_NAME"
      echo "MOUNT_DIR: $MOUNT_DIR"

      while IFS=";" read -r pattern mask target_dir; do
        # Очистка переменных от лишних пробелов
        pattern=$(echo "$pattern" | xargs)
        mask=$(echo "$mask" | xargs)
        target_dir=$(echo "$target_dir" | xargs)
        
        echo "Обработка шаблона: $pattern | маска: $mask | целевая директория: $target_dir"
        
        # Создаем целевую директорию
        full_target_dir="$UNPACK_DIR/$DIR_NAME/distr/$target_dir"
        mkdir -p "$full_target_dir" || { echo "Ошибка создания директории $full_target_dir"; exit 1; }
        
        # Поиск и перемещение файлов
        find "$MOUNT_DIR" -type f -iname "$mask" | while read -r file; do
          base=$(basename "$file")
          if [[ "$base" == $pattern* ]]; then
            echo "Найден файл: $file"
            echo "Перемещаю: $file -> $full_target_dir/"
            if ! rsync -avh "$file" "$full_target_dir/"; then
              echo "Ошибка перемещения файла $file" >&2
            fi
          fi
        done
      done < "$TXT_FILE"

      # echo "=== Завершение сортировки файлов ==="
  when: manual
