stages:
  - build

variables:
  SMB_USER: myuser
  SMB_PASS: mypass

build_distr:
  stage: build
  image:
    name: sp-dk-reg.seaproject.ru/tech-img-01:latest
  script:
    - |
      # Инициализация переменных
      ISO_DIR="/mnt/iso"
      UNPACK_DIR="/mnt/ansible"
      MOUNT_DIR="/mnt/tmpiso"
      TXT_FILE="./inventory.numbers.txt"

      # Подготовка директорий
      mkdir -p "$ISO_DIR" "$UNPACK_DIR" "$MOUNT_DIR"

      # Монтирование SMB-шар
      mount -t cifs "//sp-dk-smb.seaproject.ru/project_iso" -o user=$SMB_USER,password=$SMB_PASS,ro,iocharset=utf8,vers=2.1 "$ISO_DIR"
      mount -t cifs "//sp-dk-smb.seaproject.ru/project_ansible" -o user=$SMB_USER,password=$SMB_PASS,rw,iocharset=utf8 "$UNPACK_DIR"

      # Проверка TXT-файла
      if [ ! -f "$TXT_FILE" ]; then
        echo "Файл $TXT_FILE не найден!"
        exit 1
      fi
      echo "Содержимое $TXT_FILE:"
      cat "$TXT_FILE"

      # Анализ пути проекта
      IFS='/' read -r -a PARTS <<< "$CI_PROJECT_PATH"
      for i in "${!PARTS[@]}"; do
        if [[ "${PARTS[$i]}" == "deploy" ]]; then
          DEPLOY_INDEX=$i
          break
        fi
      done
      [ -z "$DEPLOY_INDEX" ] && exit 1

      # Определение структуры каталогов
      if [[ "${PARTS[$((DEPLOY_INDEX -1))]}" =~ ^[^0-9]*$ ]]; then
        BASE_PARTS=("${PARTS[@]:1:$((DEPLOY_INDEX - 1))}")
        SUBDIR="${PARTS[$((DEPLOY_INDEX - 1))]}"
        PRIME_DIR=$(IFS=_ ; echo "${BASE_PARTS[*]}")
        DIR_NAME="$PRIME_DIR/$SUBDIR"
      else  
        BASE_PARTS=("${PARTS[@]:1:$DEPLOY_INDEX}")
        DIR_NAME=$(IFS=_ ; echo "${BASE_PARTS[*]}")
      fi  

      mkdir -p "$UNPACK_DIR/$DIR_NAME"
      cp -r ./* "$UNPACK_DIR/$DIR_NAME"/

      # Получение списка шаблонов ISO
      echo "=== Поиск уникальных шаблонов ISO ==="
      ISO_PATTERNS=($(awk -F';' '{print $1}' "$TXT_FILE" | xargs -n1 | sort -u))
      echo "Найденные шаблоны ISO: ${ISO_PATTERNS[*]}"

      # Поиск и монтирование ISO
      for pattern in "${ISO_PATTERNS[@]}"; do
        echo "Поиск ISO: ${pattern}*.iso"
        mapfile -d '' found_isos < <(find "$ISO_DIR" -type f -iname "${pattern}*.iso" -print0)

        if [ "${#found_isos[@]}" -eq 0 ]; then
          echo "  Нет ISO для шаблона $pattern"
          continue
        fi

        echo "  Найдено ISO: ${found_isos[*]}"
        for iso in "${found_isos[@]}"; do
          iso_name=$(basename "$iso" .iso | tr ' ' '_')
          mount_point="$MOUNT_DIR/$iso_name"
          mkdir -p "$mount_point"

          if mountpoint -q "$mount_point"; then
            echo "  [$iso_name] уже смонтирован, пропускаем"
            continue
          fi

          echo "  Монтирую $iso в $mount_point"
          if mount -o loop,ro "$iso" "$mount_point"; then
            echo "  [$iso_name] смонтировано"
          else
            echo "  [ОШИБКА] Не удалось смонтировать $iso"
            rmdir "$mount_point"
          fi
        done
      done

      echo "=== Начинается сортировка файлов ==="

      # Сортировка файлов по маскам
      while IFS=";" read -r _ mask target_dir; do
        mask=$(echo "$mask" | xargs)
        target_dir=$(echo "$target_dir" | xargs)

        echo "Обработка маски '$mask' -> каталог '$target_dir'"
        full_target_dir="$UNPACK_DIR/$DIR_NAME/distr/$target_dir"
        mkdir -p "$full_target_dir"

        found_files=$(find "$MOUNT_DIR" -type f -iname "$mask")
        if [ -z "$found_files" ]; then
          echo "  Файлы по маске '$mask' не найдены"
          continue
        fi

        echo "$found_files" | while read -r file; do
          echo "  Перемещаю $file -> $full_target_dir/"
          rsync -avh "$file" "$full_target_dir/"
        done
      done < "$TXT_FILE"

      echo "=== Готово ==="
  when: manual
